syntax = "proto3";

import "google/protobuf/empty.proto";

package event;

service EventService {
    rpc CreateEvent (CreateEventRequest) returns (google.protobuf.Empty);
    rpc MyCreatedEvents (MyEventsRequest) returns (MyEvents);
    rpc UpdateEventStatus (UpdateEventRequest) returns (google.protobuf.Empty);
    // get all events where deployed status = 'success'
    rpc AllEvents (google.protobuf.Empty) returns (AllEventsResponse);
    rpc EventByContractAddress (EventByContractRequest) returns (Event);
    rpc CreateUserEvent (CreateUserEventRequest) returns (google.protobuf.Empty);
    rpc DeleteUserEvent (DeleteUserEventRequest) returns (google.protobuf.Empty);
    rpc AllUserEvents (AllUserEventsRequest) returns (AllUserEventResponse);
}

message CreateEventRequest {
    string txHash = 1;
    string imageUrl = 2;
    string eventDate = 3;
    string eventName = 4;
    string symbol = 5;
    string deployerAddress = 6;
}

message MyEventsRequest {
    string address = 1;
}

message MyEvents {
    repeated MongoEvent events = 1;
}

message MongoEvent {
    string userId = 1;
    string eventName = 2;
    string symbol = 3;
    string imageUrl = 4;
    string contractAddress = 5;
    string txHash = 6;
    string deployedStatus = 7;
    repeated int32 admins = 8;
    string eventDate = 9;
}

message UpdateEventRequest {
    string txHash = 1;
    optional string contractAddress = 2;
}

message AllEventsResponse {
    repeated Event events = 1;
}

message Event {
    string eventName = 1;
    string symbol = 2;
    string imageUrl = 3;
    string contractAddress = 4;
    string eventDate = 5;
    string ticketPrice = 6;
    string ticketAmount = 7;
    string ticketIdCounter = 8;
}

message EventByContractRequest {
    optional string contractAddress = 1;
}


message CreateUserEventRequest {
    string contractAddress = 1;
    string walletAddress = 2;
}

message DeleteUserEventRequest {
    string contractAddress = 1;
    string walletAddress = 2;
}

message AllUserEventsRequest {
    string walletAddress = 1;
}

message AllUserEventResponse {
    repeated string contractAddresses = 1;
}